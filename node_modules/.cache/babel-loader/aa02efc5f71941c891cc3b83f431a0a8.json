{"ast":null,"code":"'use strict'; // TODO: Use the `URL` global when targeting Node.js 10\n\nvar _slicedToArray = require(\"/Users/lucmosser/code/lmssr/chat_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst URLParser = typeof URL === 'undefined' ? require('url').URL : URL; // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => {\n  return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n};\n\nconst normalizeDataURL = (urlString, {\n  stripHash\n}) => {\n  const parts = urlString.match(/^data:(.*?),(.*?)(?:#(.*))?$/);\n\n  if (!parts) {\n    throw new Error(\"Invalid URL: \".concat(urlString));\n  }\n\n  const mediaType = parts[1].split(';');\n  const body = parts[2];\n  const hash = stripHash ? '' : parts[3];\n  let base64 = false;\n\n  if (mediaType[mediaType.length - 1] === 'base64') {\n    mediaType.pop();\n    base64 = true;\n  } // Lowercase MIME type\n\n\n  const mimeType = (mediaType.shift() || '').toLowerCase();\n  const attributes = mediaType.map(attribute => {\n    let _attribute$split$map = attribute.split('=').map(string => string.trim()),\n        _attribute$split$map2 = _slicedToArray(_attribute$split$map, 2),\n        key = _attribute$split$map2[0],\n        _attribute$split$map3 = _attribute$split$map2[1],\n        value = _attribute$split$map3 === void 0 ? '' : _attribute$split$map3; // Lowercase `charset`\n\n\n    if (key === 'charset') {\n      value = value.toLowerCase();\n\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return '';\n      }\n    }\n\n    return \"\".concat(key).concat(value ? \"=\".concat(value) : '');\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n\n  if (base64) {\n    normalizedMediaType.push('base64');\n  }\n\n  if (normalizedMediaType.length !== 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n\n  return \"data:\".concat(normalizedMediaType.join(';'), \",\").concat(base64 ? body.trim() : body).concat(hash ? \"#\".concat(hash) : '');\n};\n\nconst normalizeUrl = (urlString, options) => {\n  options = {\n    defaultProtocol: 'http:',\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeDirectoryIndex: false,\n    sortQueryParameters: true,\n    ...options\n  }; // TODO: Remove this at some point in the future\n\n  if (Reflect.has(options, 'normalizeHttps')) {\n    throw new Error('options.normalizeHttps is renamed to options.forceHttp');\n  }\n\n  if (Reflect.has(options, 'normalizeHttp')) {\n    throw new Error('options.normalizeHttp is renamed to options.forceHttps');\n  }\n\n  if (Reflect.has(options, 'stripFragment')) {\n    throw new Error('options.stripFragment is renamed to options.stripHash');\n  }\n\n  urlString = urlString.trim(); // Data URL\n\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n\n  const hasRelativeProtocol = urlString.startsWith('//');\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString); // Prepend protocol\n\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n\n  const urlObj = new URLParser(urlString);\n\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n  }\n\n  if (options.forceHttp && urlObj.protocol === 'https:') {\n    urlObj.protocol = 'http:';\n  }\n\n  if (options.forceHttps && urlObj.protocol === 'http:') {\n    urlObj.protocol = 'https:';\n  } // Remove auth\n\n\n  if (options.stripAuthentication) {\n    urlObj.username = '';\n    urlObj.password = '';\n  } // Remove hash\n\n\n  if (options.stripHash) {\n    urlObj.hash = '';\n  } // Remove duplicate slashes if not preceded by a protocol\n\n\n  if (urlObj.pathname) {\n    // TODO: Use the following instead when targeting Node.js 10\n    // `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\\/{2,}/g, '/');`\n    urlObj.pathname = urlObj.pathname.replace(/((?!:).|^)\\/{2,}/g, (_, p1) => {\n      if (/^(?!\\/)/g.test(p1)) {\n        return \"\".concat(p1, \"/\");\n      }\n\n      return '/';\n    });\n  } // Decode URI octets\n\n\n  if (urlObj.pathname) {\n    urlObj.pathname = decodeURI(urlObj.pathname);\n  } // Remove directory index\n\n\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObj.pathname.split('/');\n    const lastComponent = pathComponents[pathComponents.length - 1];\n\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n      urlObj.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n\n  if (urlObj.hostname) {\n    // Remove trailing dot\n    urlObj.hostname = urlObj.hostname.replace(/\\.$/, ''); // Remove `www.`\n\n    if (options.stripWWW && /^www\\.([a-z\\-\\d]{2,63})\\.([a-z.]{2,5})$/.test(urlObj.hostname)) {\n      // Each label should be max 63 at length (min: 2).\n      // The extension should be max 5 at length (min: 2).\n      // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n      urlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n    }\n  } // Remove query unwanted parameters\n\n\n  if (Array.isArray(options.removeQueryParameters)) {\n    for (const key of [...urlObj.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObj.searchParams.delete(key);\n      }\n    }\n  } // Sort query parameters\n\n\n  if (options.sortQueryParameters) {\n    urlObj.searchParams.sort();\n  }\n\n  if (options.removeTrailingSlash) {\n    urlObj.pathname = urlObj.pathname.replace(/\\/$/, '');\n  } // Take advantage of many of the Node `url` normalizations\n\n\n  urlString = urlObj.toString(); // Remove ending `/`\n\n  if ((options.removeTrailingSlash || urlObj.pathname === '/') && urlObj.hash === '') {\n    urlString = urlString.replace(/\\/$/, '');\n  } // Restore relative protocol, if applicable\n\n\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, '//');\n  } // Remove http/https\n\n\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n  }\n\n  return urlString;\n};\n\nmodule.exports = normalizeUrl; // TODO: Remove this for the next major release\n\nmodule.exports.default = normalizeUrl;","map":null,"metadata":{},"sourceType":"script"}