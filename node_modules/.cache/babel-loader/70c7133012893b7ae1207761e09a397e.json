{"ast":null,"code":"\"use strict\"; /// <reference lib=\"es2016\"/>\n/// <reference lib=\"es2017.sharedmemory\"/>\n/// <reference lib=\"esnext.asynciterable\"/>\n/// <reference lib=\"dom\"/>\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // TODO: Use the `URL` global when targeting Node.js 10\n// tslint:disable-next-line\n\nconst URLGlobal = typeof URL === 'undefined' ? require('url').URL : URL;\nconst toString = Object.prototype.toString;\n\nconst isOfType = type => value => typeof value === type;\n\nconst isBuffer = input => !is.nullOrUndefined(input) && !is.nullOrUndefined(input.constructor) && is.function_(input.constructor.isBuffer) && input.constructor.isBuffer(input);\n\nconst getObjectType = value => {\n  const objectName = toString.call(value).slice(8, -1);\n\n  if (objectName) {\n    return objectName;\n  }\n\n  return null;\n};\n\nconst isObjectOfType = type => value => getObjectType(value) === type;\n\nfunction is(value) {\n  switch (value) {\n    case null:\n      return \"null\"\n      /* null */\n      ;\n\n    case true:\n    case false:\n      return \"boolean\"\n      /* boolean */\n      ;\n\n    default:\n  }\n\n  switch (typeof value) {\n    case 'undefined':\n      return \"undefined\"\n      /* undefined */\n      ;\n\n    case 'string':\n      return \"string\"\n      /* string */\n      ;\n\n    case 'number':\n      return \"number\"\n      /* number */\n      ;\n\n    case 'symbol':\n      return \"symbol\"\n      /* symbol */\n      ;\n\n    default:\n  }\n\n  if (is.function_(value)) {\n    return \"Function\"\n    /* Function */\n    ;\n  }\n\n  if (is.observable(value)) {\n    return \"Observable\"\n    /* Observable */\n    ;\n  }\n\n  if (Array.isArray(value)) {\n    return \"Array\"\n    /* Array */\n    ;\n  }\n\n  if (isBuffer(value)) {\n    return \"Buffer\"\n    /* Buffer */\n    ;\n  }\n\n  const tagType = getObjectType(value);\n\n  if (tagType) {\n    return tagType;\n  }\n\n  if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n    throw new TypeError('Please don\\'t use object wrappers for primitive types');\n  }\n\n  return \"Object\"\n  /* Object */\n  ;\n}\n\n(function (is) {\n  // tslint:disable-next-line:strict-type-predicates\n  const isObject = value => typeof value === 'object'; // tslint:disable:variable-name\n\n\n  is.undefined = isOfType('undefined');\n  is.string = isOfType('string');\n  is.number = isOfType('number');\n  is.function_ = isOfType('function'); // tslint:disable-next-line:strict-type-predicates\n\n  is.null_ = value => value === null;\n\n  is.class_ = value => is.function_(value) && value.toString().startsWith('class ');\n\n  is.boolean = value => value === true || value === false;\n\n  is.symbol = isOfType('symbol'); // tslint:enable:variable-name\n\n  is.numericString = value => is.string(value) && value.length > 0 && !Number.isNaN(Number(value));\n\n  is.array = Array.isArray;\n  is.buffer = isBuffer;\n\n  is.nullOrUndefined = value => is.null_(value) || is.undefined(value);\n\n  is.object = value => !is.nullOrUndefined(value) && (is.function_(value) || isObject(value));\n\n  is.iterable = value => !is.nullOrUndefined(value) && is.function_(value[Symbol.iterator]);\n\n  is.asyncIterable = value => !is.nullOrUndefined(value) && is.function_(value[Symbol.asyncIterator]);\n\n  is.generator = value => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);\n\n  is.nativePromise = value => isObjectOfType(\"Promise\"\n  /* Promise */\n  )(value);\n\n  const hasPromiseAPI = value => !is.null_(value) && isObject(value) && is.function_(value.then) && is.function_(value.catch);\n\n  is.promise = value => is.nativePromise(value) || hasPromiseAPI(value);\n\n  is.generatorFunction = isObjectOfType(\"GeneratorFunction\"\n  /* GeneratorFunction */\n  );\n  is.asyncFunction = isObjectOfType(\"AsyncFunction\"\n  /* AsyncFunction */\n  );\n\n  is.boundFunction = value => is.function_(value) && !value.hasOwnProperty('prototype');\n\n  is.regExp = isObjectOfType(\"RegExp\"\n  /* RegExp */\n  );\n  is.date = isObjectOfType(\"Date\"\n  /* Date */\n  );\n  is.error = isObjectOfType(\"Error\"\n  /* Error */\n  );\n\n  is.map = value => isObjectOfType(\"Map\"\n  /* Map */\n  )(value);\n\n  is.set = value => isObjectOfType(\"Set\"\n  /* Set */\n  )(value);\n\n  is.weakMap = value => isObjectOfType(\"WeakMap\"\n  /* WeakMap */\n  )(value);\n\n  is.weakSet = value => isObjectOfType(\"WeakSet\"\n  /* WeakSet */\n  )(value);\n\n  is.int8Array = isObjectOfType(\"Int8Array\"\n  /* Int8Array */\n  );\n  is.uint8Array = isObjectOfType(\"Uint8Array\"\n  /* Uint8Array */\n  );\n  is.uint8ClampedArray = isObjectOfType(\"Uint8ClampedArray\"\n  /* Uint8ClampedArray */\n  );\n  is.int16Array = isObjectOfType(\"Int16Array\"\n  /* Int16Array */\n  );\n  is.uint16Array = isObjectOfType(\"Uint16Array\"\n  /* Uint16Array */\n  );\n  is.int32Array = isObjectOfType(\"Int32Array\"\n  /* Int32Array */\n  );\n  is.uint32Array = isObjectOfType(\"Uint32Array\"\n  /* Uint32Array */\n  );\n  is.float32Array = isObjectOfType(\"Float32Array\"\n  /* Float32Array */\n  );\n  is.float64Array = isObjectOfType(\"Float64Array\"\n  /* Float64Array */\n  );\n  is.arrayBuffer = isObjectOfType(\"ArrayBuffer\"\n  /* ArrayBuffer */\n  );\n  is.sharedArrayBuffer = isObjectOfType(\"SharedArrayBuffer\"\n  /* SharedArrayBuffer */\n  );\n  is.dataView = isObjectOfType(\"DataView\"\n  /* DataView */\n  );\n\n  is.directInstanceOf = (instance, klass) => Object.getPrototypeOf(instance) === klass.prototype;\n\n  is.urlInstance = value => isObjectOfType(\"URL\"\n  /* URL */\n  )(value);\n\n  is.urlString = value => {\n    if (!is.string(value)) {\n      return false;\n    }\n\n    try {\n      new URLGlobal(value); // tslint:disable-line no-unused-expression\n\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  };\n\n  is.truthy = value => Boolean(value);\n\n  is.falsy = value => !value;\n\n  is.nan = value => Number.isNaN(value);\n\n  const primitiveTypes = new Set(['undefined', 'string', 'number', 'boolean', 'symbol']);\n\n  is.primitive = value => is.null_(value) || primitiveTypes.has(typeof value);\n\n  is.integer = value => Number.isInteger(value);\n\n  is.safeInteger = value => Number.isSafeInteger(value);\n\n  is.plainObject = value => {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/master/index.js\n    let prototype;\n    return getObjectType(value) === \"Object\"\n    /* Object */\n    && (prototype = Object.getPrototypeOf(value), prototype === null || // tslint:disable-line:ban-comma-operator\n    prototype === Object.getPrototypeOf({}));\n  };\n\n  const typedArrayTypes = new Set([\"Int8Array\"\n  /* Int8Array */\n  , \"Uint8Array\"\n  /* Uint8Array */\n  , \"Uint8ClampedArray\"\n  /* Uint8ClampedArray */\n  , \"Int16Array\"\n  /* Int16Array */\n  , \"Uint16Array\"\n  /* Uint16Array */\n  , \"Int32Array\"\n  /* Int32Array */\n  , \"Uint32Array\"\n  /* Uint32Array */\n  , \"Float32Array\"\n  /* Float32Array */\n  , \"Float64Array\"\n  /* Float64Array */\n  ]);\n\n  is.typedArray = value => {\n    const objectType = getObjectType(value);\n\n    if (objectType === null) {\n      return false;\n    }\n\n    return typedArrayTypes.has(objectType);\n  };\n\n  const isValidLength = value => is.safeInteger(value) && value > -1;\n\n  is.arrayLike = value => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\n\n  is.inRange = (value, range) => {\n    if (is.number(range)) {\n      return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n\n    if (is.array(range) && range.length === 2) {\n      return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n\n    throw new TypeError(\"Invalid range: \".concat(JSON.stringify(range)));\n  };\n\n  const NODE_TYPE_ELEMENT = 1;\n  const DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\n\n  is.domElement = value => is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n\n  is.observable = value => {\n    if (!value) {\n      return false;\n    }\n\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\n      return true;\n    }\n\n    if (value['@@observable'] && value === value['@@observable']()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  is.nodeStream = value => !is.nullOrUndefined(value) && isObject(value) && is.function_(value.pipe) && !is.observable(value);\n\n  is.infinite = value => value === Infinity || value === -Infinity;\n\n  const isAbsoluteMod2 = rem => value => is.integer(value) && Math.abs(value % 2) === rem;\n\n  is.even = isAbsoluteMod2(0);\n  is.odd = isAbsoluteMod2(1);\n\n  const isWhiteSpaceString = value => is.string(value) && /\\S/.test(value) === false;\n\n  is.emptyArray = value => is.array(value) && value.length === 0;\n\n  is.nonEmptyArray = value => is.array(value) && value.length > 0;\n\n  is.emptyString = value => is.string(value) && value.length === 0;\n\n  is.nonEmptyString = value => is.string(value) && value.length > 0;\n\n  is.emptyStringOrWhitespace = value => is.emptyString(value) || isWhiteSpaceString(value);\n\n  is.emptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n\n  is.nonEmptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\n\n  is.emptySet = value => is.set(value) && value.size === 0;\n\n  is.nonEmptySet = value => is.set(value) && value.size > 0;\n\n  is.emptyMap = value => is.map(value) && value.size === 0;\n\n  is.nonEmptyMap = value => is.map(value) && value.size > 0;\n\n  const predicateOnArray = (method, predicate, values) => {\n    if (is.function_(predicate) === false) {\n      throw new TypeError(\"Invalid predicate: \".concat(JSON.stringify(predicate)));\n    }\n\n    if (values.length === 0) {\n      throw new TypeError('Invalid number of values');\n    }\n\n    return method.call(values, predicate);\n  }; // tslint:disable variable-name\n\n\n  is.any = (predicate, ...values) => predicateOnArray(Array.prototype.some, predicate, values);\n\n  is.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values); // tslint:enable variable-name\n\n})(is || (is = {})); // Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\n\n\nObject.defineProperties(is, {\n  class: {\n    value: is.class_\n  },\n  function: {\n    value: is.function_\n  },\n  null: {\n    value: is.null_\n  }\n});\nexports.default = is; // For CommonJS default export support\n\nmodule.exports = is;\nmodule.exports.default = is;","map":null,"metadata":{},"sourceType":"script"}