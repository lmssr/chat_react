{"ast":null,"code":"'use strict';\n\nconst errors = require('./errors');\n\nconst asStream = require('./as-stream');\n\nconst asPromise = require('./as-promise');\n\nconst normalizeArguments = require('./normalize-arguments');\n\nconst merge = require('./merge');\n\nconst deepFreeze = require('./utils/deep-freeze');\n\nconst getPromiseOrStream = options => options.stream ? asStream(options) : asPromise(options);\n\nconst aliases = ['get', 'post', 'put', 'patch', 'head', 'delete'];\n\nconst create = defaults => {\n  defaults = merge({}, defaults);\n  normalizeArguments.preNormalize(defaults.options);\n\n  if (!defaults.handler) {\n    // This can't be getPromiseOrStream, because when merging\n    // the chain would stop at this point and no further handlers would be called.\n    defaults.handler = (options, next) => next(options);\n  }\n\n  function got(url, options) {\n    try {\n      return defaults.handler(normalizeArguments(url, options, defaults), getPromiseOrStream);\n    } catch (error) {\n      if (options && options.stream) {\n        throw error;\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  got.create = create;\n\n  got.extend = options => {\n    let mutableDefaults;\n\n    if (options && Reflect.has(options, 'mutableDefaults')) {\n      mutableDefaults = options.mutableDefaults;\n      delete options.mutableDefaults;\n    } else {\n      mutableDefaults = defaults.mutableDefaults;\n    }\n\n    return create({\n      options: merge.options(defaults.options, options),\n      handler: defaults.handler,\n      mutableDefaults\n    });\n  };\n\n  got.mergeInstances = (...args) => create(merge.instances(args));\n\n  got.stream = (url, options) => got(url, { ...options,\n    stream: true\n  });\n\n  for (const method of aliases) {\n    got[method] = (url, options) => got(url, { ...options,\n      method\n    });\n\n    got.stream[method] = (url, options) => got.stream(url, { ...options,\n      method\n    });\n  }\n\n  Object.assign(got, { ...errors,\n    mergeOptions: merge.options\n  });\n  Object.defineProperty(got, 'defaults', {\n    value: defaults.mutableDefaults ? defaults : deepFreeze(defaults),\n    writable: defaults.mutableDefaults,\n    configurable: defaults.mutableDefaults,\n    enumerable: true\n  });\n  return got;\n};\n\nmodule.exports = create;","map":null,"metadata":{},"sourceType":"script"}