{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst got_1 = require(\"got\");\n\nconst platform_node_1 = require(\"@pusher/platform-node\");\n\nconst utils_1 = require(\"./utils\");\n\nconst package_json_1 = __importDefault(require(\"../package.json\"));\n\nconst TOKEN_EXPIRY_LEEWAY = 30;\n\nclass Chatkit {\n  constructor(options) {\n    const instanceLocator = options.instanceLocator,\n          key = options.key,\n          port = options.port,\n          host = options.host,\n          client = options.client;\n    const sdkInfo = new platform_node_1.SDKInfo({\n      productName: \"chatkit\",\n      version: package_json_1.default.version\n    });\n    const instanceOptions = {\n      locator: instanceLocator,\n      key,\n      port,\n      host,\n      client,\n      sdkInfo\n    };\n\n    const serverInstanceOptions = version => Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit\",\n      serviceVersion: version\n    });\n\n    const authorizerInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_authorizer\",\n      serviceVersion: \"v2\"\n    });\n    const cursorsInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_cursors\",\n      serviceVersion: \"v2\"\n    });\n    const schedulerInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_scheduler\",\n      serviceVersion: \"v1\"\n    });\n    this.instanceLocator = instanceLocator;\n    this.serverInstanceV2 = new platform_node_1.Instance(serverInstanceOptions(\"v2\"));\n    this.serverInstance = new platform_node_1.Instance(serverInstanceOptions(\"v6\"));\n    this.authorizerInstance = new platform_node_1.Instance(authorizerInstanceOptions);\n    this.cursorsInstance = new platform_node_1.Instance(cursorsInstanceOptions);\n    this.schedulerInstance = new platform_node_1.Instance(schedulerInstanceOptions);\n  } // Token generation\n\n\n  authenticate(options) {\n    const userId = options.userId,\n          authPayload = options.authPayload;\n    return this.serverInstance.authenticate(authPayload || {\n      grant_type: \"client_credentials\"\n    }, {\n      userId\n    });\n  } // Used internally - not designed to be used externally\n\n\n  generateAccessToken(options) {\n    return this.serverInstance.generateAccessToken(options);\n  } // User interactions\n\n\n  createUser(options) {\n    const id = options.id,\n          name = options.name;\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: \"/users\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        id,\n        name,\n        avatar_url: options.avatarURL,\n        custom_data: options.customData\n      },\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  createUsers(options) {\n    const users = options.users.map(user => {\n      const id = user.id,\n            name = user.name;\n      return {\n        id,\n        name,\n        avatar_url: user.avatarURL,\n        custom_data: user.customData\n      };\n    });\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: \"/batch_users\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        users\n      },\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  updateUser(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.id\n    });\n    let updatePayload = {};\n\n    if (options.name) {\n      updatePayload.name = options.name;\n    }\n\n    if (options.avatarURL) {\n      updatePayload.avatar_url = options.avatarURL;\n    }\n\n    if (options.customData) {\n      updatePayload.custom_data = options.customData;\n    }\n\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: \"/users/\".concat(options.id),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: updatePayload,\n      jwt: jwt.token\n    }).then(() => {});\n  }\n\n  deleteUser(options) {\n    return this.serverInstance.request({\n      method: \"DELETE\",\n      path: \"/users/\".concat(options.userId),\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getUser(options) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/users/\".concat(encodeURIComponent(options.id)),\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  getUsers(options = {}) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/users\",\n      qs: {\n        from_ts: options.fromTimestamp,\n        limit: options.limit\n      },\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getUsersById(options) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/users_by_ids\",\n      qs: {\n        id: options.userIds\n      },\n      useQuerystring: true,\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  } // Room interactions\n\n\n  getRoom(options) {\n    const jwt = this.generateAccessToken({\n      su: true\n    });\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId)),\n      jwt: jwt.token\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  sendMessage(options) {\n    let messagePayload = {\n      text: options.text\n    };\n\n    if (options.attachment) {\n      messagePayload.attachment = {\n        resource_link: options.attachment.resourceLink,\n        type: options.attachment.type\n      };\n    }\n\n    return this.serverInstanceV2.request({\n      method: \"POST\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages\"),\n      jwt: this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      }).token,\n      body: messagePayload\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  sendSimpleMessage(options) {\n    return this.sendMultipartMessage({\n      roomId: options.roomId,\n      userId: options.userId,\n      parts: [{\n        type: \"text/plain\",\n        content: options.text\n      }]\n    });\n  }\n\n  sendMultipartMessage(options) {\n    if (options.parts.length === 0) {\n      return Promise.reject(new TypeError(\"message must contain at least one part\"));\n    }\n\n    return Promise.all(options.parts.map(part => part.file ? this.uploadAttachment({\n      userId: options.userId,\n      roomId: options.roomId,\n      part\n    }) : part)).then(parts => this.serverInstance.request({\n      method: \"POST\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages\"),\n      jwt: this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      }).token,\n      body: {\n        parts\n      }\n    })).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  uploadAttachment({\n    userId,\n    roomId,\n    part: {\n      type,\n      name,\n      customData,\n      file\n    }\n  }) {\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: \"/rooms/\".concat(encodeURIComponent(roomId), \"/attachments\"),\n      jwt: this.generateAccessToken({\n        su: true,\n        userId\n      }).token,\n      body: {\n        content_type: type,\n        content_length: file.length,\n        name,\n        custom_data: customData\n      }\n    }).then(({\n      body\n    }) => {\n      const _JSON$parse = JSON.parse(body),\n            attachmentId = _JSON$parse.attachment_id,\n            uploadURL = _JSON$parse.upload_url;\n\n      return got_1.put(uploadURL, {\n        body: file,\n        headers: {\n          \"content-type\": type\n        }\n      }).then(() => ({\n        type,\n        attachment: {\n          id: attachmentId\n        }\n      }));\n    });\n  }\n\n  deleteMessage(options) {\n    return this.serverInstance.request({\n      method: \"DELETE\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages/\").concat(encodeURIComponent(options.messageId)),\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getRoomMessages(options) {\n    return this.fetchMessages(Object.assign({}, options, {\n      serverInstance: this.serverInstanceV2\n    }));\n  }\n\n  fetchMultipartMessages(options) {\n    return this.fetchMessages(Object.assign({}, options, {\n      serverInstance: this.serverInstance\n    }));\n  }\n\n  fetchMessages(options) {\n    const jwt = this.generateAccessToken({\n      su: true\n    });\n    let qs = {\n      direction: options.direction,\n      limit: options.limit,\n      initial_id: options.initialId\n    };\n    return options.serverInstance.request({\n      method: \"GET\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages\"),\n      jwt: jwt.token,\n      qs: qs\n    }).then(res => JSON.parse(res.body));\n  }\n\n  getRooms(options = {}) {\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/rooms\",\n      jwt: this.getServerToken(),\n      qs: {\n        from_id: options.fromId,\n        include_private: options.includePrivate\n      }\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getUserRooms(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.userId\n    });\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/users/\".concat(options.userId, \"/rooms\"),\n      jwt: jwt.token\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getUserJoinableRooms(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.userId\n    });\n    return this.serverInstance.request({\n      method: \"GET\",\n      path: \"/users/\".concat(options.userId, \"/rooms\"),\n      qs: {\n        joinable: true\n      },\n      jwt: jwt.token\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  createRoom(options) {\n    const jwt = this.generateAccessToken({\n      su: true,\n      userId: options.creatorId\n    });\n    const id = options.id,\n          name = options.name,\n          pushNotificationTitleOverride = options.pushNotificationTitleOverride,\n          isPrivate = options.isPrivate,\n          userIds = options.userIds,\n          customData = options.customData;\n    let roomPayload = {\n      name,\n      push_notification_title_override: pushNotificationTitleOverride,\n      private: isPrivate || false\n    };\n\n    if (id) {\n      roomPayload.id = id;\n    }\n\n    if (userIds && userIds.length !== 0) {\n      roomPayload[\"user_ids\"] = userIds;\n    }\n\n    if (customData) {\n      roomPayload.custom_data = customData;\n    }\n\n    return this.serverInstance.request({\n      method: \"POST\",\n      path: \"/rooms\",\n      jwt: jwt.token,\n      body: roomPayload\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  updateRoom(options) {\n    const body = {};\n\n    if (options.name) {\n      body.name = options.name;\n    }\n\n    if (options.pushNotificationTitleOverride) {\n      body.push_notification_title_override = options.pushNotificationTitleOverride;\n    }\n\n    if (options.isPrivate != null) {\n      body.private = options.isPrivate;\n    }\n\n    if (options.customData) {\n      body.custom_data = options.customData;\n    }\n\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: \"/rooms/\".concat(options.id),\n      jwt: this.getServerToken(),\n      body\n    }).then(() => {});\n  }\n\n  deleteRoom(options) {\n    return this.serverInstance.request({\n      method: \"DELETE\",\n      path: \"/rooms/\".concat(options.id),\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  addUsersToRoom(options) {\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/add\"),\n      jwt: this.getServerToken(),\n      body: {\n        user_ids: options.userIds\n      }\n    }).then(() => {});\n  }\n\n  removeUsersFromRoom(options) {\n    return this.serverInstance.request({\n      method: \"PUT\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/remove\"),\n      jwt: this.getServerToken(),\n      body: {\n        user_ids: options.userIds\n      }\n    }).then(() => {});\n  } // Authorizer interactions\n\n\n  createRoomRole(options) {\n    return this.createRole(Object.assign({}, options, {\n      scope: \"room\"\n    }));\n  }\n\n  createGlobalRole(options) {\n    return this.createRole(Object.assign({}, options, {\n      scope: \"global\"\n    }));\n  }\n\n  createRole(options) {\n    return this.authorizerInstance.request({\n      method: \"POST\",\n      path: \"/roles\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: options,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  deleteGlobalRole(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: \"/roles/\".concat(options.name, \"/scope/global\"),\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  deleteRoomRole(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: \"/roles/\".concat(options.name, \"/scope/room\"),\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  assignGlobalRoleToUser(options) {\n    return this.assignRoleToUser(options);\n  }\n\n  assignRoomRoleToUser(options) {\n    return this.assignRoleToUser(options);\n  }\n\n  assignRoleToUser(options) {\n    return this.authorizerInstance.request({\n      method: \"PUT\",\n      path: \"/users/\".concat(options.userId, \"/roles\"),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        name: options.name,\n        room_id: options.roomId\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getUserRoles(options) {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: \"/users/\".concat(options.userId, \"/roles\"),\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  removeGlobalRoleForUser(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: \"/users/\".concat(options.userId, \"/roles\"),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  removeRoomRoleForUser(options) {\n    return this.authorizerInstance.request({\n      method: \"DELETE\",\n      path: \"/users/\".concat(options.userId, \"/roles\"),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      qs: {\n        room_id: options.roomId\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getPermissionsForGlobalRole(options) {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: \"/roles/\".concat(options.name, \"/scope/global/permissions\"),\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  getPermissionsForRoomRole(options) {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: \"/roles/\".concat(options.name, \"/scope/room/permissions\"),\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  }\n\n  updatePermissionsForGlobalRole(options) {\n    return this.updatePermissionsForRole(options.name, \"global\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n  }\n\n  updatePermissionsForRoomRole(options) {\n    return this.updatePermissionsForRole(options.name, \"room\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n  }\n\n  getRoles() {\n    return this.authorizerInstance.request({\n      method: \"GET\",\n      path: \"/roles\",\n      jwt: this.getServerToken()\n    }).then(res => {\n      return JSON.parse(res.body);\n    });\n  } // Cursors\n\n\n  setReadCursor(options) {\n    return this.cursorsInstance.request({\n      method: \"PUT\",\n      path: \"/cursors/0/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/\").concat(encodeURIComponent(options.userId)),\n      body: {\n        position: options.position\n      },\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n\n  getReadCursor(options) {\n    return this.cursorsInstance.request({\n      method: \"GET\",\n      path: \"/cursors/0/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/\").concat(encodeURIComponent(options.userId)),\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  getReadCursorsForUser(options) {\n    return this.cursorsInstance.request({\n      method: \"GET\",\n      path: \"/cursors/0/users/\".concat(encodeURIComponent(options.userId)),\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  getReadCursorsForRoom(options) {\n    return this.cursorsInstance.request({\n      method: \"GET\",\n      path: \"/cursors/0/rooms/\".concat(encodeURIComponent(options.roomId)),\n      jwt: this.getServerToken()\n    }).then(({\n      body\n    }) => JSON.parse(body));\n  }\n\n  asyncDeleteRoom(options) {\n    return this.schedulerInstance.request({\n      method: \"PUT\",\n      path: \"/rooms/\".concat(encodeURIComponent(options.roomId)),\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  }\n\n  asyncDeleteUser(options) {\n    return this.schedulerInstance.request({\n      method: \"PUT\",\n      path: \"/users/\".concat(encodeURIComponent(options.userId)),\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  }\n\n  getDeleteStatus(options) {\n    return this.schedulerInstance.request({\n      method: \"GET\",\n      path: \"/status/\".concat(encodeURIComponent(options.jobId)),\n      jwt: this.getServerToken()\n    }).then(res => JSON.parse(res.body));\n  } // General requests\n\n\n  apiRequest(options) {\n    options.jwt = options.jwt || this.getServerToken();\n    return this.serverInstance.request(options);\n  }\n\n  authorizerRequest(options) {\n    options.jwt = options.jwt || this.getServerToken();\n    return this.authorizerInstance.request(options);\n  }\n\n  cursorsRequest(options) {\n    options.jwt = options.jwt || this.getServerToken();\n    return this.cursorsInstance.request(options);\n  }\n\n  updatePermissionsForRole(name, scope, permissionsToadd = [], permissionsToRemove = []) {\n    if (permissionsToadd.length === 0 && permissionsToRemove.length === 0) {\n      throw new Error(\"Either permissionsToAdd or permissionsToRemove is required\");\n    }\n\n    let body = {};\n\n    if (permissionsToadd.length > 0) {\n      body[\"add_permissions\"] = permissionsToadd;\n    }\n\n    if (permissionsToRemove.length > 0) {\n      body[\"remove_permissions\"] = permissionsToRemove;\n    }\n\n    return this.authorizerInstance.request({\n      method: \"PUT\",\n      path: \"/roles/\".concat(name, \"/scope/\").concat(scope, \"/permissions\"),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: body,\n      jwt: this.getServerToken()\n    }).then(() => {});\n  }\n  /**\n   * This method manages the token for http library and pusher platform\n   * communication\n   */\n\n\n  getServerToken() {\n    if (this.tokenWithExpiry && this.tokenWithExpiry.expiresAt > utils_1.getCurrentTimeInSeconds()) {\n      return this.tokenWithExpiry.token;\n    } // Otherwise generate new token and its expiration time\n\n\n    const tokenWithExpiresIn = this.serverInstance.generateAccessToken({\n      su: true\n    });\n    this.tokenWithExpiry = {\n      token: tokenWithExpiresIn.token,\n      expiresAt: utils_1.getCurrentTimeInSeconds() + tokenWithExpiresIn.expires_in - TOKEN_EXPIRY_LEEWAY\n    };\n    return this.tokenWithExpiry.token;\n  }\n\n}\n\nexports.default = Chatkit;","map":null,"metadata":{},"sourceType":"script"}