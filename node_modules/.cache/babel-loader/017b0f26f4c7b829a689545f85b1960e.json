{"ast":null,"code":"'use strict';\n\nconst pump = require('pump');\n\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n  constructor() {\n    super('maxBuffer exceeded');\n    this.name = 'MaxBufferError';\n  }\n\n}\n\nasync function getStream(inputStream, options) {\n  if (!inputStream) {\n    return Promise.reject(new Error('Expected a stream'));\n  }\n\n  options = {\n    maxBuffer: Infinity,\n    ...options\n  };\n  const _options = options,\n        maxBuffer = _options.maxBuffer;\n  let stream;\n  await new Promise((resolve, reject) => {\n    const rejectPromise = error => {\n      if (error) {\n        // A null check\n        error.bufferedData = stream.getBufferedValue();\n      }\n\n      reject(error);\n    };\n\n    stream = pump(inputStream, bufferStream(options), error => {\n      if (error) {\n        rejectPromise(error);\n        return;\n      }\n\n      resolve();\n    });\n    stream.on('data', () => {\n      if (stream.getBufferedLength() > maxBuffer) {\n        rejectPromise(new MaxBufferError());\n      }\n    });\n  });\n  return stream.getBufferedValue();\n}\n\nmodule.exports = getStream; // TODO: Remove this for the next major release\n\nmodule.exports.default = getStream;\n\nmodule.exports.buffer = (stream, options) => getStream(stream, { ...options,\n  encoding: 'buffer'\n});\n\nmodule.exports.array = (stream, options) => getStream(stream, { ...options,\n  array: true\n});\n\nmodule.exports.MaxBufferError = MaxBufferError;","map":null,"metadata":{},"sourceType":"script"}