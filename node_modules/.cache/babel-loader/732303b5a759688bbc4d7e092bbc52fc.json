{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst JSONB = require('json-buffer');\n\nconst loadStore = opts => {\n  const adapters = {\n    redis: '@keyv/redis',\n    mongodb: '@keyv/mongo',\n    mongo: '@keyv/mongo',\n    sqlite: '@keyv/sqlite',\n    postgresql: '@keyv/postgres',\n    postgres: '@keyv/postgres',\n    mysql: '@keyv/mysql'\n  };\n\n  if (opts.adapter || opts.uri) {\n    const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];\n    return new (require(adapters[adapter]))(opts);\n  }\n\n  return new Map();\n};\n\nclass Keyv extends EventEmitter {\n  constructor(uri, opts) {\n    super();\n    this.opts = Object.assign({\n      namespace: 'keyv',\n      serialize: JSONB.stringify,\n      deserialize: JSONB.parse\n    }, typeof uri === 'string' ? {\n      uri\n    } : uri, opts);\n\n    if (!this.opts.store) {\n      const adapterOpts = Object.assign({}, this.opts);\n      this.opts.store = loadStore(adapterOpts);\n    }\n\n    if (typeof this.opts.store.on === 'function') {\n      this.opts.store.on('error', err => this.emit('error', err));\n    }\n\n    this.opts.store.namespace = this.opts.namespace;\n  }\n\n  _getKeyPrefix(key) {\n    return \"\".concat(this.opts.namespace, \":\").concat(key);\n  }\n\n  get(key) {\n    key = this._getKeyPrefix(key);\n    const store = this.opts.store;\n    return Promise.resolve().then(() => store.get(key)).then(data => {\n      data = typeof data === 'string' ? this.opts.deserialize(data) : data;\n\n      if (data === undefined) {\n        return undefined;\n      }\n\n      if (typeof data.expires === 'number' && Date.now() > data.expires) {\n        this.delete(key);\n        return undefined;\n      }\n\n      return data.value;\n    });\n  }\n\n  set(key, value, ttl) {\n    key = this._getKeyPrefix(key);\n\n    if (typeof ttl === 'undefined') {\n      ttl = this.opts.ttl;\n    }\n\n    if (ttl === 0) {\n      ttl = undefined;\n    }\n\n    const store = this.opts.store;\n    return Promise.resolve().then(() => {\n      const expires = typeof ttl === 'number' ? Date.now() + ttl : null;\n      value = {\n        value,\n        expires\n      };\n      return store.set(key, this.opts.serialize(value), ttl);\n    }).then(() => true);\n  }\n\n  delete(key) {\n    key = this._getKeyPrefix(key);\n    const store = this.opts.store;\n    return Promise.resolve().then(() => store.delete(key));\n  }\n\n  clear() {\n    const store = this.opts.store;\n    return Promise.resolve().then(() => store.clear());\n  }\n\n}\n\nmodule.exports = Keyv;","map":null,"metadata":{},"sourceType":"script"}