{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/lucmosser/code/lmssr/chat_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst _require = require('url'),\n      URL = _require.URL;\n\nconst is = require('@sindresorhus/is');\n\nconst knownHookEvents = require('./known-hook-events');\n\nconst merge = (target, ...sources) => {\n  for (const source of sources) {\n    for (const _ref of Object.entries(source)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const key = _ref2[0];\n      const sourceValue = _ref2[1];\n\n      if (is.undefined(sourceValue)) {\n        continue;\n      }\n\n      const targetValue = target[key];\n\n      if (is.urlInstance(targetValue) && (is.urlInstance(sourceValue) || is.string(sourceValue))) {\n        target[key] = new URL(sourceValue, targetValue);\n      } else if (is.plainObject(sourceValue)) {\n        if (is.plainObject(targetValue)) {\n          target[key] = merge({}, targetValue, sourceValue);\n        } else {\n          target[key] = merge({}, sourceValue);\n        }\n      } else if (is.array(sourceValue)) {\n        target[key] = merge([], sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    }\n  }\n\n  return target;\n};\n\nconst mergeOptions = (...sources) => {\n  sources = sources.map(source => source || {});\n  const merged = merge({}, ...sources);\n  const hooks = {};\n\n  for (const hook of knownHookEvents) {\n    hooks[hook] = [];\n  }\n\n  for (const source of sources) {\n    if (source.hooks) {\n      for (const hook of knownHookEvents) {\n        hooks[hook] = hooks[hook].concat(source.hooks[hook]);\n      }\n    }\n  }\n\n  merged.hooks = hooks;\n  return merged;\n};\n\nconst mergeInstances = (instances, methods) => {\n  const handlers = instances.map(instance => instance.defaults.handler);\n  const size = instances.length - 1;\n  return {\n    methods,\n    options: mergeOptions(...instances.map(instance => instance.defaults.options)),\n    handler: (options, next) => {\n      let iteration = -1;\n\n      const iterate = options => handlers[++iteration](options, iteration === size ? next : iterate);\n\n      return iterate(options);\n    }\n  };\n};\n\nmodule.exports = merge;\nmodule.exports.options = mergeOptions;\nmodule.exports.instances = mergeInstances;","map":null,"metadata":{},"sourceType":"script"}